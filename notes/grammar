Grammar elements:

program := (tydef | def | fun)*
tydef   := 'type' IDENT '=' ty
fun     := 'fn' IDENT '(' itseq? ')' ty block
itseq   := IDENT ty (',' IDENT ty)*
ty      := '*'* IDENT
block   := '{' stmt* '}'
stmt    := if | def | ret | expr
if      := 'if' ifbody
ifbody  := expr block elif? else?
elif    := 'elif' ifbody
else    := 'else' block
def     := 'let' IDENT ty '=' expr
ret     := 'return' expr
expr    := unop? binterm ';'?
unop    := '-' | '*' | '&' | '!' | '~'
binterm := aterm  (binop aterm)*
binop   := '+' | '-' | '*' | '/' | '%' | '&&' | '||' | '&' | '|' | '^' | '==' | '!=' | '<' | '>' | '<=' | '>='
aterm   := term ( '.' IDENT | '(' exprseq? ')' )*
exprseq := expr ( ',' expr )*
term    := '(' expr ')' | lit | IDENT
lit     := STRING | CHAR | NUMBER

Token elements:

IDENT   := <A> ( <A> | <D> )*
STRING  := '"' SC* '"'
SC      := EC | <S>
CHAR    := "'" CC* '"'
CC      := EC | <C>
EC      := '\\' | '\"' | '\x' <X> <X>
NUMBER  := INT ( '.' INT )?
INT     := '-'? <D>+
IGNORE  := <W>

Clasifier elements:

<A>     := [a-zA-Z_]
<X>     := [a-fA-F0-9]
<D>     := [0-9]
<S>     := [^"\n]
<C>     := [^'\n]
<W>     := [ \t\n]

